#!/usr/bin/env python3

#
# The Certificate Transparency Honeybee (ct-honeybee) is a lightweight
# program that retrieves signed tree heads (STHs) from Certificate
# Transparency logs and uploads them to auditors.
#
# You can help strengthen the integrity of the Certificate Transparency
# ecosystem by running ct-honeybee on your workstation/server/toaster every
# hour or so (pick a random minute so that not everyone runs ct-honeybee
# at the same time).  Running ct-honeybee from many different Internet
# vantage points increases the likelihood of detecting a misbehaving log
# which has presented a different view of the log to different clients.
#
# Version: 2021-05-24
#
# Written in 2017 by Opsmate, Inc. d/b/a SSLMate <sslmate@sslmate.com>
#
# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide. This software is distributed without any
# warranty.
#
# You should have received a copy of the CC0 Public
# Domain Dedication along with this software. If not, see
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#

import json
import random
import re
import socket
import ssl
import sys
import time
import urllib.request

logs = [
	# [ "Log Address", "Log ID (base64-encoded sha256 of log public key)" ]
	[ "ct.cloudflare.com/logs/cirrus", "ORpT9vlZkgxya++m6eVhlRlIazWCHo6bP8qCGYmzoW8=" ],
	[ "ct.cloudflare.com/logs/nimbus2017", "H7w24ALt6X9AGZ6Gs1c7ikIX2AGHdGrQ2gOgYFTSDfQ=" ],
	[ "ct.cloudflare.com/logs/nimbus2018", "23Sv7ssp7LH+yj5xbSzluaq7NveEcYPHXZ1PN7Yfv2Q=" ],
	[ "ct.cloudflare.com/logs/nimbus2019", "dH7agzGtMxCRIZzOJU9CcMK//V5CIAjGNzV55hB7zFY=" ],
	[ "ct.cloudflare.com/logs/nimbus2020", "Xqdz+d9WwOe1Nkh90EngMnqRmgyEoRIShBh1loFxRVg=" ],
	[ "ct.cloudflare.com/logs/nimbus2021", "RJRlLrDuzq/EQAfYqP4owNrmgr7YyzG1P9MzlrW2gag=" ],
	[ "ct.cloudflare.com/logs/nimbus2022", "QcjKsd8iRkoQxqE6CUKHXk4xixsD6+tLx2jwkGKWBvY=" ],
	[ "ct.cloudflare.com/logs/nimbus2023", "ejKMVNi3LbYg6jjgUh7phBZwMhOFTTvSK8E6V6NS61I=" ],
	[ "ct.googleapis.com/aviator", "aPaY+B9kgr46jO65KB1M/HFRXWeT1ETRCmesu09P+8Q=" ],
	[ "ct.googleapis.com/daedalus", "HQJLjrFJizRN/YfqPvwJlvdQbyNdHUlwYaR3PEOcJfs=" ],
	[ "ct.googleapis.com/icarus", "KTxRllTIOWW6qlD8WAfUt2+/WHopctykwwz05UVH9Hg=" ],
	[ "ct.googleapis.com/logs/argon2017", "+tTJfMSe4vishcXqXOoJ0CINu/TknGtQZi/4aPhrjCg=" ],
	[ "ct.googleapis.com/logs/argon2018", "pFASaQVaFVReYhGrN7wQP2KuVXakXksXFEU+GyIQaiU=" ],
	[ "ct.googleapis.com/logs/argon2019", "Y/Lbzeg7zCzPC3KEJ1drM6SNYXePvXWmOLHHaFRL2I0=" ],
	[ "ct.googleapis.com/logs/argon2020", "sh4FzIuizYogTodm+Su5iiUgZ2va+nDnsklTLe+LkF4=" ],
	[ "ct.googleapis.com/logs/argon2021", "9lyUL9F3MCIUVBgIMJRWjuNNExkzv98MLyALzE7xZOM=" ],
	[ "ct.googleapis.com/logs/argon2022", "KXm+8J45OSHwVnOfY6V35b5XfZxgCvj5TV0mXCVdx4Q=" ],
	[ "ct.googleapis.com/logs/argon2023", "6D7Q2j71BjUy51covIlryQPTy9ERa+zraeF3fW0GvW4=" ],
	[ "ct.googleapis.com/logs/crucible", "w78Dp+HKiEHGB7rj/0Jw/KXsRbGG675OLPP8d4Yw9fY=" ],
	[ "ct.googleapis.com/logs/solera2018", "UutLIl7IlpdIUGdfI+Q7wdAh4yFM5S7NX6h8IDzfygM=" ],
	[ "ct.googleapis.com/logs/solera2019", "C3YOmouaaC+ImFsV6UdQGlZEa7qIMHhcOEKZQ4ZFDAA=" ],
	[ "ct.googleapis.com/logs/solera2020", "H8cs5aG3mfQAw1m/+WyjkTVI6GRCIGEJUum6F3T3usc=" ],
	[ "ct.googleapis.com/logs/solera2021", "o8mYRegKt84AFXs3Qt8CB90nKytgLs+Y7iwS25xa5+c=" ],
	[ "ct.googleapis.com/logs/solera2022", "aXqvyhprU2+uISBQRt661+Dq6hPSQy5unY+zefK5qvM=" ],
	[ "ct.googleapis.com/logs/xenon2018", "sQzVWabWeEaBH335pRUyc5rEjXA76gMj2l04dVvArU4=" ],
	[ "ct.googleapis.com/logs/xenon2019", "CEEUmABxUywWGQRgvPxH/cJlOvopLHKzf/hjrinMyfA=" ],
	[ "ct.googleapis.com/logs/xenon2020", "B7dcG+V9aP/xsMYdIxXHuuZXfFeUt2ruvGE6GmnTohw=" ],
	[ "ct.googleapis.com/logs/xenon2021", "fT7y+I//iFVoJMLAyp5SiXkrxQ54CX8uapdomX4i8Nc=" ],
	[ "ct.googleapis.com/logs/xenon2022", "RqVV63X6kSAwtaKJafTzfREsQXS+/Um4havy/HD+bUc=" ],
	[ "ct.googleapis.com/logs/xenon2023", "rfe++nz/EMiLnT2cHj4YarRnKV3PsQwkyoWGNOvcgoo=" ],
	[ "ct.googleapis.com/pilot", "pLkJkLQYWBSHuxOizGdwCjw1mAT5G9+443fNDsgN3BA=" ],
	[ "ct.googleapis.com/rocketeer", "7ku9t3XOYLrhQmkfq+GeZqMPfl+wctiDAMR7iXqo/cs=" ],
	[ "ct.googleapis.com/skydiver", "u9nfvB+KcbWTlCOXqpJ7RzhXlQqrUugakJZkNo4e0YU=" ],
	[ "ct.googleapis.com/submariner", "qJnYeAySkKr0YvMYgMz71SRR6XDQ+/WR73Ww2ZtkVoE=" ],
	[ "ct.googleapis.com/testtube", "sMyD5aX5fWuvfAnMKEkEhyrH6IsTLGNQt8b9JuFsbHc=" ],
	[ "ct.trustasia.com/log2020", "pZWUO1NwvukG4AUNH7W7xqQOZfJlroUsdjY/rbIzNu0=" ],
	[ "ct.trustasia.com/log2021", "Z422Wz50Q7bzo3DV4TqxtDvgoNNR98p0IlDHxvpRqIo=" ],
	[ "ct2021.trustasia.com/log2021", "qNxS9j1rJCXlMeN89ORKcU8UKiCAOw0E0uLuBmR5SiM=" ],
	[ "ct.trustasia.com/log2022", "w2X5s2VPMoPHnamOk9dBj1ure+MlLJjh0vBLuetCfSM=" ],
	[ "ct.trustasia.com/log2023", "6H6nZgvCbPYALvVyXT/g4zG5OTu5L79Y6zuQSdr1Q1o=" ],
	[ "ct1.digicert-ct.com/log", "VhQGmi/XwuzT9eG9RLI+x0Z2ubyZEVzA75SYVdaJ0N0=" ],
	[ "ctserver.cnnic.cn", "pXesnO11SN2PAltnokEInfhuD0duwgPC7L7bGF8oJjg=" ],
	[ "dodo.ct.comodo.com", "23b9raxl59CVCIhuIVm9i5A1L1/q0+PcXiLrNQrMe5g=" ],
	[ "mammoth.ct.comodo.com", "b1N2rDHwMRnYmQCkURX/dxUcEdkCwQApBo2yCJo32RM=" ],
	[ "nessie2020.ct.digicert.com/log", "xlKg7EjOs/yrFwmSxDqHQTMJ6ABlomJSQBujNioXxWU=" ],
	[ "nessie2021.ct.digicert.com/log", "7sCV7o1yZA+S48O5G8cSo2lqCXtLahoUOOZHssvtxfk=" ],
	[ "nessie2022.ct.digicert.com/log", "UaOw9f0BeZxWbbg3eI8MpHrMGyfL956IQpoN/tSLBeU=" ],
	[ "nessie2023.ct.digicert.com/log", "s3N3B+GEUPhjhtYFqdwRCUp5LbFnDAuH3PADDnk2pZo=" ],
	[ "oak.ct.letsencrypt.org/2021", "lCC8Ho7VjWyIcx+CiyIsDdHaTV5sT5Q9YdtOL1hNosI=" ],
	[ "oak.ct.letsencrypt.org/2022", "36Veq2iCTx9sre64X04+WurNohKkal6OOxLAIERcKnM=" ],
	[ "oak.ct.letsencrypt.org/2023", "tz77JN+cTbp18jnFulj0bF38Qs96nzXEnh0JgSXttJk=" ],
	[ "sabre.ct.comodo.com", "VYHUwhaQNgFK6gubVzxT8MDkOHhwJQgXL6OqHQcT0ww=" ],
	[ "testflume.ct.letsencrypt.org/2020", "xj8iGMN9VqaqBrWW2o5T1NcVbR6brI5E0iAt5k1p2dw=" ],
	[ "testflume.ct.letsencrypt.org/2021", "A+3x2pd2tvOMNB457Z1wenVwNpz5hE8yf+nhQTg2G2A=" ],
	[ "testflume.ct.letsencrypt.org/2022", "Iyfv2jUlENvAGe9JGuP/HMWkebzjeHg2DuMYz/tk+Mg=" ],
	[ "testflume.ct.letsencrypt.org/2023", "VTS3q1pqw6fL66ZUh7Ki1xtI9lD6F8UZfJegyyB288Y=" ],
	[ "yeti2020.ct.digicert.com/log", "8JWkWfIA0YJAEC0vk4iOrUv+HUfjmeHQNKawqKqOsnM=" ],
	[ "yeti2021.ct.digicert.com/log", "XNxDkv7mq0VEsV6a1FbmEDf71fpH3KFzlLJe5vbHDso=" ],
	[ "yeti2022-2.ct.digicert.com/log", "BZwB0yDgB4QTlYBJjRF8kDJmr69yULWvO0akPhGEDUo=" ],
	[ "yeti2023.ct.digicert.com/log", "Nc8ZG7+xbFe/D61MbULLu7YnICZR6j/hKu+oA8M71kw=" ],
]

auditors = [
	"certspotter.com",
	"ct.grahamedgecombe.com",
]

user_agent = "ct-honeybee (https://github.com/SSLMate/ct-honeybee/)"
log_timeout = 15
auditor_timeout = 60

time_format = '%Y-%m-%d %H:%M:%S %z'
base64_re = re.compile('^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$')

def is_base64(obj):
	return isinstance(obj, str) and base64_re.search(obj) is not None

def is_sth(obj):
	return isinstance(obj, dict) \
	   and "sth_version" in obj and isinstance(obj["sth_version"], int) \
	   and "tree_size" in obj and isinstance(obj["tree_size"], int) \
	   and "timestamp" in obj and isinstance(obj["timestamp"], int) \
	   and "sha256_root_hash" in obj and is_base64(obj["sha256_root_hash"]) \
	   and "tree_head_signature" in obj and is_base64(obj["tree_head_signature"]) \
	   and "log_id" in obj and is_base64(obj["log_id"])

def is_pollen(obj):
	return isinstance(obj, dict) \
	   and "sths" in obj and isinstance(obj["sths"], list)

def is_known_log(arg):
	for _, log_id in logs:
		if arg == log_id:
			return True
	return False

def is_same_sth(a, b):
	return a["log_id"] == b["log_id"] \
	   and a["tree_size"] == b["tree_size"] \
	   and a["timestamp"] == b["timestamp"] \
	   and a["sha256_root_hash"] == b["sha256_root_hash"]

def has_sth(sths, target_sth):
	return any(sth for sth in sths if is_same_sth(sth, target_sth))

pollen = { "sths": [] }

# Disable certificate validation. Unfortunately, there is no guarantee
# that logs use a certificate from a widely-trusted CA. Fortunately,
# all responses are signed by logs and verified by auditors, so there
# is technically no need for certificate validation.
try:
	_create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
	pass
else:
	ssl._create_default_https_context = _create_unverified_https_context

for log_address, log_id in logs:
	try:
		req = urllib.request.Request("https://" + log_address + "/ct/v1/get-sth",
					     data=None, headers={"User-Agent": ""})
		with urllib.request.urlopen(req, timeout=log_timeout) as response:
			sth = json.loads(response.read().decode("utf-8"))
			if isinstance(sth, dict):
				sth["sth_version"] = 0
				sth["log_id"] = log_id
				if is_sth(sth):
					pollen["sths"].append(sth)
	except Exception as err:
		print("[%s] ct-honeybee: Log error: %s: %s: %s" % (time.strftime(time_format), log_address, type(err).__name__, err), file=sys.stderr)

random.shuffle(auditors)

for auditor_domain in auditors:
	try:
		req = urllib.request.Request("https://" + auditor_domain + "/.well-known/ct/v1/sth-pollination",
					     data=json.dumps(pollen).encode("utf8"),
					     headers={"Content-Type": "application/json", "User-Agent": user_agent})
		with urllib.request.urlopen(req, timeout=auditor_timeout) as response:
			more_pollen = json.loads(response.read().decode("utf-8"))
			if is_pollen(more_pollen):
				for sth in more_pollen["sths"]:
					if is_sth(sth) and is_known_log(sth["log_id"]) and not has_sth(pollen["sths"], sth):
						pollen["sths"].append(sth)
	except Exception as err:
		print("[%s] ct-honeybee: Auditor error: %s: %s: %s" % (time.strftime(time_format), auditor_domain, type(err).__name__, err), file=sys.stderr)

#print(json.dumps(pollen))
