#!/usr/bin/env python3

#
# The Certificate Transparency Honeybee (ct-honeybee) is a lightweight
# program that retrieves signed tree heads (STHs) from Certificate
# Transparency logs and uploads them to auditors.
#
# You can help strengthen the integrity of the Certificate Transparency
# ecosystem by running ct-honeybee on your workstation/server/toaster every
# hour or so (pick a random minute so that not everyone runs ct-honeybee
# at the same time).  Running ct-honeybee from many different Internet
# vantage points increases the likelihood of detecting a misbehaving log
# which has presented a different view of the log to different clients.
#
# Written in 2017 by Opsmate, Inc. d/b/a SSLMate <sslmate@sslmate.com>
#
# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide. This software is distributed without any
# warranty.
#
# You should have received a copy of the CC0 Public
# Domain Dedication along with this software. If not, see
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#

import json
import random
import re
import socket
import ssl
import sys
import time
import urllib.request

version = "2021-09-14"

log_lists = [
	"https://loglist.certspotter.org/honeybee.json",
]

auditors = [
	"certspotter.com",
]

user_agent = "ct-honeybee/" + version + " (https://github.com/SSLMate/ct-honeybee/)"
log_list_timeout = 60
log_timeout = 15
auditor_timeout = 60

time_format = '%Y-%m-%d %H:%M:%S %z'
base64_re = re.compile('^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$')

def is_base64(obj):
	return isinstance(obj, str) and base64_re.search(obj) is not None

def is_sth(obj):
	return isinstance(obj, dict) \
	   and "sth_version" in obj and isinstance(obj["sth_version"], int) \
	   and "tree_size" in obj and isinstance(obj["tree_size"], int) \
	   and "timestamp" in obj and isinstance(obj["timestamp"], int) \
	   and "sha256_root_hash" in obj and is_base64(obj["sha256_root_hash"]) \
	   and "tree_head_signature" in obj and is_base64(obj["tree_head_signature"]) \
	   and "log_id" in obj and is_base64(obj["log_id"])

def is_pollen(obj):
	return isinstance(obj, dict) \
	   and "sths" in obj and isinstance(obj["sths"], list)

def is_known_log(arg):
	for _, log_id in logs:
		if arg == log_id:
			return True
	return False

def is_same_sth(a, b):
	return a["log_id"] == b["log_id"] \
	   and a["tree_size"] == b["tree_size"] \
	   and a["timestamp"] == b["timestamp"] \
	   and a["sha256_root_hash"] == b["sha256_root_hash"]

def has_sth(sths, target_sth):
	return any(sth for sth in sths if is_same_sth(sth, target_sth))

pollen = { "sths": [] }
logs = []

for log_list_url in log_lists:
	try:
		req = urllib.request.Request(log_list_url, headers={"User-Agent": user_agent})
		with urllib.request.urlopen(req, timeout=log_list_timeout) as response:
			log_list = json.loads(response.read().decode("utf-8"))
			for operator in log_list["operators"]:
				for log in operator["logs"]:
					logs.append([ log["url"], log["log_id"] ])
	except Exception as err:
		print("[%s] ct-honeybee: log list error: %s: %s: %s" % (time.strftime(time_format), log_list_url, type(err).__name__, err), file=sys.stderr)

# Disable certificate validation. Unfortunately, there is no guarantee
# that logs use a certificate from a widely-trusted CA. Fortunately,
# all responses are signed by logs and verified by auditors, so there
# is technically no need for certificate validation.
try:
	_create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
	pass
else:
	ssl._create_default_https_context = _create_unverified_https_context

for log_url, log_id in logs:
	try:
		req = urllib.request.Request(log_url + "ct/v1/get-sth",
					     data=None, headers={"User-Agent": ""})
		with urllib.request.urlopen(req, timeout=log_timeout) as response:
			sth = json.loads(response.read().decode("utf-8"))
			if isinstance(sth, dict):
				sth["sth_version"] = 0
				sth["log_id"] = log_id
				if is_sth(sth):
					pollen["sths"].append(sth)
	except Exception as err:
		print("[%s] ct-honeybee: Log error: %s: %s: %s" % (time.strftime(time_format), log_url, type(err).__name__, err), file=sys.stderr)

random.shuffle(auditors)

for auditor_domain in auditors:
	try:
		req = urllib.request.Request("https://" + auditor_domain + "/.well-known/ct/v1/sth-pollination",
					     data=json.dumps(pollen).encode("utf8"),
					     headers={"Content-Type": "application/json", "User-Agent": user_agent})
		with urllib.request.urlopen(req, timeout=auditor_timeout) as response:
			more_pollen = json.loads(response.read().decode("utf-8"))
			if is_pollen(more_pollen):
				for sth in more_pollen["sths"]:
					if is_sth(sth) and is_known_log(sth["log_id"]) and not has_sth(pollen["sths"], sth):
						pollen["sths"].append(sth)
	except Exception as err:
		print("[%s] ct-honeybee: Auditor error: %s: %s: %s" % (time.strftime(time_format), auditor_domain, type(err).__name__, err), file=sys.stderr)

#print(json.dumps(pollen))
